// ################################################################ 
//  This file has been generated by the hashspace compiler          
//  Direct MODIFICATIONS WILL BE LOST when the file is recompiled!  
// ################################################################ 

var hsp=require("hsp/rt");
var klass=require("hsp/klass"), $set=require("hsp/$set");

var CITIES={
	"SFO":{city:"San Francisco",offset:-8},
	"PAR":{city:"Paris",offset:+1},
	"TYO":{city:"Tokyo",offset:+9}
}

var ClockController=klass({
	attributes:{
		"city":{type:"string",binding:"1-way",defaultValue:"PAR"}
	},
	$init:function() {
		this.minuteMarkers=[]; // list of minute markers
		for (var i=0;60>i;i++) {
			this.minuteMarkers[i]={major:(i%5===0)};
		}
		this.onCityChange();
		this._iid=setInterval(this.tick.bind(this),100);
	},
	$dispose:function() {
		clearInterval(this._iid);
	},
	onCityChange:function() {
		// dynamic city change: check city validity and refresh the display
		if (!CITIES[this.city]) { 
			// unsupported city
			this.city="PAR"; // default
		}
		this.tick(); 
	},
	tick:function() {
		var d=new Date();
		var to=CITIES[this.city].offset;
		var o=d.getTimezoneOffset()/60;
		d=new Date(d.getTime()+ ((o+to)*3600000)); // date in the target city
		$set(this,"hours",d.getHours());
		$set(this,"minutes",d.getMinutes());
		$set(this,"seconds",d.getSeconds());
		$set(this,"milliseconds",d.getMilliseconds());
		$set(this,"cityName",CITIES[this.city].city);
	}
});


var clock = require("hsp/rt").template({ctl:[ClockController,"ClockController"],ref:"c"}, function(n){
  return [n.$text(0,[" "]),n.elt("div",0,{"class":"square"},0,[n.elt("svg",0,{"viewBox":"0 0 100 100"},0,[n.elt("g",0,{"transform":"translate(50,50)"},0,[n.elt("circle",0,{"class":"clock-face","r":"48"},0),n.$text(0,[" "]),n.$foreach({e1:[1,2,"c","minuteMarkers"]},"idx","m",0,1,[n.$text(0,[" "]),n.elt("line",{e1:[6,function(a0) {return [((a0)? ''+"major":''),((!(a0))? ''+"minor":'')].join(' ');},2],e2:[1,2,"m","major"],e3:[6,function(a0) {return (a0? 35 : 42);},4],e4:[1,2,"m","major"],e5:[6,function(a0,a1) {return ((360 * a0) / a1);},6,7],e6:[1,1,"idx"],e7:[1,3,"c","minuteMarkers","length"]},{"class":["",1],"y1":["",3],"y2":"45","transform":["rotate(",5,")"]},0)]),n.$text(0,["  "]),n.elt("line",{e1:[6,function(a0,a1) {return ((30 * a0) + (a1 / 2));},2,3],e2:[1,2,"c","hours"],e3:[1,2,"c","minutes"]},{"class":"hour","y1":"2","y2":"-20","transform":["rotate(",1,")"]},0),n.$text(0,[" "]),n.elt("line",{e1:[6,function(a0,a1) {return ((6 * a0) + (a1 / 10));},2,3],e2:[1,2,"c","minutes"],e3:[1,2,"c","seconds"]},{"class":"minute","y1":"4","y2":"-30","transform":["rotate(",1,")"]},0),n.$text(0,[" "]),n.elt("g",{e1:[6,function(a0,a1) {return (6 * (a0 + (a1 * 0.001)));},2,3],e2:[1,2,"c","seconds"],e3:[1,2,"c","milliseconds"]},{"transform":["rotate(",1,")"]},0,[n.elt("line",0,{"class":"second","y1":"10","y2":"-38"},0),n.elt("line",0,{"class":"second-counterweight","y1":"10","y2":"2"},0)])])]),n.elt("div",0,{"class":"city"},0,[n.$text({e1:[1,2,"c","cityName"]},["",1])])])];
});



var demo = require("hsp/rt").template([], function(n){
  var _clock;try {_clock=clock} catch(e) {};
  return [n.cpt([_clock,"clock"],0,{"city":"SFO"},0),n.cpt([_clock,"clock"],0,{"city":"PAR"},0),n.cpt([_clock,"clock"],0,{"city":"TYO"},0)];
});


// display the template in the #output div
demo().render("output");

