// ################################################################ 
//  This file has been generated by the hashspace compiler          
//  Direct MODIFICATIONS WILL BE LOST when the file is recompiled!  
// ################################################################ 

var hsp=require("hsp/rt");
var klass=require("hsp/klass"), $set=require("hsp/$set");

// klass is a utility to create JS objects with constructors & prototypes
var Timer=klass({
    attributes: {
      initvalue:{type:"int",defaultValue:0,binding:"none"}
    },
    $init:function() {
      this.secondsElapsed=this.initvalue;
      this._iid=setInterval(this.tick.bind(this),1000);
    },
    $dispose:function() {
      clearInterval(this._iid);
    },
    tick:function() {
      console.log("tick");
      $set(this,"secondsElapsed",this.secondsElapsed+1);
    }
});


var timer = require("hsp/rt").template({ctl:[Timer,"Timer"],ref:"t"}, function(n){
  return [n.$text({e1:[1,2,"t","secondsElapsed"]},["Elapsed time: ",1,"s "])];
});



var test = require("hsp/rt").template([], function(n){
  var _timer;try {_timer=timer} catch(e) {};
  return [n.$text(0,["Sample showing two timer instances with different init values:"]),n.elt("br",0,0,0),n.cpt([_timer,"timer"],0,0,0),n.$text(0,[" "]),n.elt("br",0,0,0),n.cpt([_timer,"timer"],0,{"initvalue":"10"},0)];
});


// display the test template in the #output div
test().render("output");

