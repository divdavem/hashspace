// ################################################################ 
//  This file has been generated by the hashspace compiler          
//  Direct MODIFICATIONS WILL BE LOST when the file is recompiled!  
// ################################################################ 

var hsp=require("hsp/rt");
var klass=require("hsp/klass"), $set=require("hsp/$set");

// Component controller
var NbrField = klass({ 
  attributes:{ 
    "value":{type:"float",defaultValue:0,binding:"2-way"}, 
    "defaultvalue":{type:"float",defaultValue:0}, 
    "min":{type:"float",defaultValue:-Number.MAX_VALUE,binding:"1-way"}, 
    "max":{type:"float",defaultValue:Number.MAX_VALUE,binding:"1-way"},
    "onreset":{type:"callback"}
  },
  /**
   * init method called when all attributes have been initialized
   */
  $init:function() { 
    // set and init internal properties
    this.internalValue=''+this.value; // type:string but bound to value
    this.isValid=true;                // bound to internalValue, min and max
    this.checkValidity();
  },
  /** 
   * attribute change handlers - notify the controller that an external object
   * (template or host) updated the value attribute
   */
  onValueChange:function(newValue,oldValue) {
    var n=getNumber(newValue);
    $set(this,"internalValue",n!==null? n : 0); 
    this.checkValidity(); 
  },
  onMinChange:function(newValue,oldValue) {
    this.checkValidity(); 
  },
  onMaxChange:function(newValue,oldValue) {
    this.checkValidity(); 
  },
  /** 
   * property change handler - notify the controller that the template
   * changed an internal property 
   */ 
  onInternalValueChange:function(newValue,oldValue) { 
    // validate and expose as attribute if ok
    $set(this,"value",this.checkValidity()? parseInt(this.internalValue,10) : this.defaultvalue); 
  }, 
  /** 
   * Check if the internal value is valid and update the isValid property accordingly 
   */ 
  checkValidity:function() { 
    var n=getNumber(this.internalValue); 
    var v=(n===null)? false : (n>=this.min) && (n<=this.max); 
    $set(this,"isValid",v); 
    return v; 
  },
  /**
   * Reset the field value
   */
  resetField:function() {
    var v1=this.value, v2=this.defaultvalue;
    $set(this,"internalValue",v2);
    $set(this,"value",v2);
    this.checkValidity();
    this.onreset({oldValue:v1,newValue:v2}); // call back event listener
  }
})

// transform a string to a number 
var NBR_DIGITS=/^(\-|\.|\+)?\d+(\.)?(\d+)?$/; 
function getNumber(s) { 
    s=""+s; 
    if (!NBR_DIGITS.test(s)) return null; 
    return Number(s); 
}

// component template associated with the NbrField controller

var nbrfield =exports.nbrfield = require("hsp/rt").template({ctl:[NbrField,"NbrField"],ref:"c"}, function(n){
  return [n.elt("span",0,{"class":"nbrfield"},0,[n.elt("input",{e1:[1,2,"c","internalValue"],e2:[6,function(a0) {return ["nbrfield",((!(a0))? ''+"error":'')].join(' ');},3],e3:[1,2,"c","isValid"]},{"type":"text","#model":["",1],"class":["",2]},0),n.elt("button",{e1:[3,2,"c","resetField"]},0,{"click":1},[n.$text(0,["reset"])])])];
});


// component usage

var test = require("hsp/rt").template(["d"], function(n){
  var _nbrfield;try {_nbrfield=nbrfield} catch(e) {};
  return [n.$text(0,["Component #1: "]),n.cpt([_nbrfield,"nbrfield"],{e1:[1,2,"d","value1"]},{"value":["",1],"min":"-10","max":"1000"},0),n.elt("br",0,0,0),n.$text(0,["Value in the data model: "]),n.elt("span",0,{"class":"textValue"},0,[n.$text({e1:[1,2,"d","value1"]},["",1])]),n.$text(0,["(min:-10 / max:1000 / default:0) "]),n.elt("hr",0,0,0),n.$text(0,["Component #2: "]),n.cpt([_nbrfield,"nbrfield"],{e1:[1,2,"d","value2"]},{"value":["",1]},0),n.elt("br",0,0,0),n.$text(0,["Value in the data model: "]),n.elt("span",0,{"class":"textValue"},0,[n.$text({e1:[1,2,"d","value2"]},["",1])])];
});


// display the template in the #output div
test({value1:123}).render("output");

