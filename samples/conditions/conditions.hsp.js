// ################################################################ 
//  This file has been generated by the hashspace compiler          
//  Direct MODIFICATIONS WILL BE LOST when the file is recompiled!  
// ################################################################ 

var hsp=require("hsp/rt");
var klass=require("hsp/klass"), $set=require("hsp/$set");

// nt is an instance of NumberTester

var test = require("hsp/rt").template(["nt"], function(n){
  return [n.elt("div",0,0,0,[n.$text(0,["Number: "]),n.elt("span",0,{"class":"textvalue"},0,[n.$text({e1:[1,2,"nt","number"]},["",1])]),n.$if({e1:[6,function(a0) {return (a0 == 0);},2],e2:[1,2,"nt","number"]},1,[n.$text(0,["(Number equals zero) "])],[n.$if({e1:[6,function(a0) {return (a0 > 0);},2],e2:[1,2,"nt","number"]},1,[n.$text(0,["(Number is greater than zero) "])],[n.$text(0,["(Number is less than zero) "])])]),n.elt("br",0,0,0),n.$text(0,["Condition using ternary operator: Number is  "]),n.elt("span",0,{"class":"textvalue"},0,[n.$text({e1:[6,function(a0) {return ((a0 > 0)? "strictly positive" : "negative or null");},2],e2:[1,2,"nt","number"]},["",1,"  "])])]),n.elt("div",0,{"class":"section2"},0,[n.elt("a",{e1:[3,2,"nt","increment",0,1]},0,{"click":1},[n.$text(0,["Increment Number"])]),n.$text(0,[" -  "]),n.elt("a",{e1:[3,2,"nt","increment",1,2],e2:[6,function() {return -(1);}]},0,{"click":1},[n.$text(0,["Decrement Number"])])])];
});


// klass is a little utility to create a JS object constructor 
// from a simple JSON structure - main goals are to
// to simplify prototypal inheritance and ease code reading
var NumberTester=klass({
    $constructor:function() {
        this.number=0;
    },
    increment:function(nbr2) {
        $set(this,"number",this.number+nbr2);
    }
});

// display the template in the #output div
test(new NumberTester()).render("output");

